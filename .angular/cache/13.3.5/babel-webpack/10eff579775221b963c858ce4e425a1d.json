{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, forwardRef, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nfunction StarRatingComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.labelText);\n  }\n}\n\nfunction StarRatingComponent_div_3_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"star-empty \", ctx_r3.classEmpty, \"\");\n  }\n}\n\nfunction StarRatingComponent_div_3_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"star-half \", ctx_r4.classHalf, \"\");\n  }\n}\n\nfunction StarRatingComponent_div_3_i_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"star-filled \", ctx_r5.classFilled, \"\");\n  }\n}\n\nfunction StarRatingComponent_div_3__svg_svg_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 10);\n    i0.ɵɵelement(1, \"use\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"href\", ctx_r6.pathEmpty, null, \"xlink\");\n  }\n}\n\nfunction StarRatingComponent_div_3__svg_svg_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 12);\n    i0.ɵɵelement(1, \"use\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"href\", ctx_r7.pathHalf, null, \"xlink\");\n  }\n}\n\nfunction StarRatingComponent_div_3__svg_svg_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 13);\n    i0.ɵɵelement(1, \"use\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"href\", ctx_r8.pathFilled, null, \"xlink\");\n  }\n}\n\nfunction StarRatingComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵlistener(\"mouseenter\", function StarRatingComponent_div_3_Template_div_mouseenter_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const star_r2 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onStarHover(star_r2);\n    })(\"click\", function StarRatingComponent_div_3_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const star_r2 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onStarClicked(star_r2);\n    });\n    i0.ɵɵtemplate(1, StarRatingComponent_div_3_i_1_Template, 1, 3, \"i\", 6);\n    i0.ɵɵtemplate(2, StarRatingComponent_div_3_i_2_Template, 1, 3, \"i\", 6);\n    i0.ɵɵtemplate(3, StarRatingComponent_div_3_i_3_Template, 1, 3, \"i\", 6);\n    i0.ɵɵtemplate(4, StarRatingComponent_div_3__svg_svg_4_Template, 2, 1, \"svg\", 7);\n    i0.ɵɵtemplate(5, StarRatingComponent_div_3__svg_svg_5_Template, 2, 1, \"svg\", 8);\n    i0.ɵɵtemplate(6, StarRatingComponent_div_3__svg_svg_6_Template, 2, 1, \"svg\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.svgVisible());\n  }\n}\n\nfunction StarRatingControlComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.labelText);\n  }\n}\n\nfunction StarRatingControlComponent_div_3_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"star-empty \", ctx_r3.classEmpty, \"\");\n  }\n}\n\nfunction StarRatingControlComponent_div_3_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"star-half \", ctx_r4.classHalf, \"\");\n  }\n}\n\nfunction StarRatingControlComponent_div_3_i_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"star-filled \", ctx_r5.classFilled, \"\");\n  }\n}\n\nfunction StarRatingControlComponent_div_3__svg_svg_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 10);\n    i0.ɵɵelement(1, \"use\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"href\", ctx_r6.pathEmpty, null, \"xlink\");\n  }\n}\n\nfunction StarRatingControlComponent_div_3__svg_svg_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 12);\n    i0.ɵɵelement(1, \"use\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"href\", ctx_r7.pathHalf, null, \"xlink\");\n  }\n}\n\nfunction StarRatingControlComponent_div_3__svg_svg_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 13);\n    i0.ɵɵelement(1, \"use\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"href\", ctx_r8.pathFilled, null, \"xlink\");\n  }\n}\n\nfunction StarRatingControlComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵlistener(\"mouseenter\", function StarRatingControlComponent_div_3_Template_div_mouseenter_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const star_r2 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onStarHover(star_r2);\n    })(\"click\", function StarRatingControlComponent_div_3_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const star_r2 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onStarClicked(star_r2);\n    });\n    i0.ɵɵtemplate(1, StarRatingControlComponent_div_3_i_1_Template, 1, 3, \"i\", 6);\n    i0.ɵɵtemplate(2, StarRatingControlComponent_div_3_i_2_Template, 1, 3, \"i\", 6);\n    i0.ɵɵtemplate(3, StarRatingControlComponent_div_3_i_3_Template, 1, 3, \"i\", 6);\n    i0.ɵɵtemplate(4, StarRatingControlComponent_div_3__svg_svg_4_Template, 2, 1, \"svg\", 7);\n    i0.ɵɵtemplate(5, StarRatingControlComponent_div_3__svg_svg_5_Template, 2, 1, \"svg\", 8);\n    i0.ɵɵtemplate(6, StarRatingControlComponent_div_3__svg_svg_6_Template, 2, 1, \"svg\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.svgVisible());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.svgVisible());\n  }\n}\n\nclass StarRatingConfig {}\n\nclass StarRatingUtils {\n  //Static methods\n  ///////////////////////////////////////////////////////////////////////////////////////////\n\n  /*\n   * getStarsArray\n   *\n   * returns an array of increasing numbers starting at 1\n   *\n   * @param numOfStars\n   * @returns {Array}\n   */\n  static getStarsArray(numOfStars) {\n    let stars = [];\n\n    for (let i = 0; i < numOfStars; i++) {\n      stars.push(i + 1);\n    }\n\n    return stars;\n  }\n  /*\n   * getHalfStarVisible\n   *\n   * Returns true if there should be a half star visible, and false if not.\n   *\n   * @param rating\n   * @returns {boolean}\n   */\n\n\n  static getHalfStarVisible(rating) {\n    return Math.abs(rating % 1) > 0;\n  }\n  /*\n   * getColor\n   *\n   * The default function for color calculation\n   * based on the current rating and the the number of stars possible.\n   * If a staticColor is set the function will use it as return value.\n   *\n   * @param rating\n   * @param numOfStars\n   * @param staticColor\n   * @returns {starRatingColor}\n   */\n\n\n  static getColor(rating, numOfStars, staticColor) {\n    rating = rating || 0; //if a fix color is set use this one\n\n    if (staticColor) {\n      return staticColor;\n    } //calculate size of smallest fraction\n\n\n    let fractionSize = numOfStars / 3; //apply color by fraction\n\n    let color = 'default';\n\n    if (rating > 0) {\n      color = 'negative';\n    }\n\n    if (rating > fractionSize) {\n      color = 'ok';\n    }\n\n    if (rating > fractionSize * 2) {\n      color = 'positive';\n    }\n\n    return color;\n  }\n  /*\n   * isDigitKeyEventCode\n   * detects digit key event sodes\n   * @param eventCode\n   * @returns {boolean}\n   */\n\n\n  static isDigitKeyEventCode(eventCode) {\n    return eventCode.indexOf('Digit') === 0;\n  }\n\n}\n\nclass StarRating {\n  constructor(config) {\n    this.config = config; //set default ctrl props\n\n    this.classEmpty = this.config.classEmpty;\n    this.classHalf = this.config.classHalf;\n    this.classFilled = this.config.classFilled;\n    this.pathEmpty = this.config.svgPathEmpty;\n    this.pathHalf = this.config.svgPathHalf;\n    this.pathFilled = this.config.svgPathFilled; //set default Component Inputs\n\n    if ('getColor' in this.config && typeof this.config.getColor === 'function') {\n      this.getColor = this.config.getColor;\n    }\n\n    if ('getHalfStarVisible' in this.config && typeof this.config.getHalfStarVisible === 'function') {\n      this.getHalfStarVisible = this.config.getHalfStarVisible;\n    }\n\n    this.numOfStars = this.config.numOfStars;\n    this.rating = 0;\n    this.step = 1;\n  } /////////////////////////////////////////////\n\n\n  set rating(value) {\n    this.setRating(value);\n  }\n\n  get showHalfStars() {\n    return this._showHalfStars;\n  }\n\n  set showHalfStars(value) {\n    this._showHalfStars = !!value; //update halfStarVisible\n\n    this.setHalfStarVisible();\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(value) {\n    this._id = value || '';\n  }\n\n  get focus() {\n    return this._focus;\n  }\n\n  set focus(value) {\n    this._focus = !!value;\n  }\n\n  get labelText() {\n    return this._labelText;\n  }\n\n  set labelText(value) {\n    this._labelText = value;\n  }\n\n  get labelPosition() {\n    return this._labelPosition;\n  }\n\n  set labelPosition(value) {\n    this._labelPosition = value || this.config.labelPosition;\n  }\n\n  get labelVisible() {\n    return this._labelVisible;\n  }\n\n  set labelVisible(value) {\n    this._labelVisible = !!value;\n  }\n\n  get hoverEnabled() {\n    return this._hoverEnabled;\n  }\n\n  set hoverEnabled(value) {\n    this._hoverEnabled = value !== undefined ? !!value : false;\n  }\n\n  get staticColor() {\n    return this._staticColor || this.config.staticColor || undefined;\n  }\n\n  set staticColor(value) {\n    this._staticColor = value; //update color.\n\n    this.setColor();\n  }\n\n  get direction() {\n    return this._direction;\n  }\n\n  set direction(value) {\n    this._direction = value || undefined;\n  }\n\n  get numOfStars() {\n    return this._numOfStars;\n  }\n\n  set numOfStars(value) {\n    this._numOfStars = value > 0 ? value : this.config.numOfStars; //update stars array\n\n    this.stars = StarRatingUtils.getStarsArray(this.numOfStars); //update color\n\n    this.setColor();\n  }\n\n  get hoverRating() {\n    return this._hoverRating;\n  }\n\n  set hoverRating(value) {\n    this._hoverRating = value > 0 ? value : 0;\n  }\n\n  get speed() {\n    return this._speed;\n  }\n\n  set speed(value) {\n    this._speed = value || this.config.speed;\n  }\n\n  get size() {\n    return this._size || this.config.size;\n  }\n\n  set size(value) {\n    this._size = value;\n  }\n\n  get starType() {\n    return this._starType || this.config.starType;\n  }\n\n  set starType(value) {\n    this._starType = value;\n  }\n\n  get space() {\n    return this._space;\n  }\n\n  set space(value) {\n    this._space = value;\n  }\n\n  get readOnly() {\n    return this._readOnly;\n  }\n\n  set readOnly(value) {\n    this._readOnly = !!value;\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = !!value;\n  }\n\n  get step() {\n    return this._step;\n  }\n\n  set step(value) {\n    this._step = value > 0 ? value : 1;\n  }\n\n  get rating() {\n    return this._rating;\n  }\n  /**\n   * setRating\n   * I use a setter function instead of a set method to enable overrides for this function.\n   * @param value\n   */\n\n\n  setRating(value) {\n    //validate and apply newRating\n    let newRating = 0;\n\n    if (value >= 0 && value <= this.numOfStars) {\n      newRating = value;\n    } //limit max value to max number of stars\n\n\n    if (value > this.numOfStars) {\n      newRating = this.numOfStars;\n    }\n\n    this._rating = newRating; //update ratingAsInteger. rating parsed to int for the value-[n] modifier\n\n    this.ratingAsInteger = parseInt(this._rating.toString(), 10); //update halfStarsVisible\n\n    this.setHalfStarVisible(); //update calculated Color\n\n    this.setColor();\n  }\n\n  svgVisible() {\n    return this.starType === 'svg';\n  }\n\n  interactionPossible() {\n    return !this.readOnly && !this.disabled;\n  }\n\n  setColor(useHoverValue = false) {\n    console.log('useHoverValue: ', useHoverValue); //check if custom function is given\n\n    const ratingValue = useHoverValue ? this.hoverRating : this.rating;\n\n    if (typeof this.getColor === 'function') {\n      this.color = this.getColor(ratingValue, this.numOfStars, this.staticColor);\n    } else {\n      this.color = StarRatingUtils.getColor(ratingValue, this.numOfStars, this.staticColor);\n    }\n  }\n\n  setHalfStarVisible() {\n    //update halfStarVisible\n    if (this.showHalfStars) {\n      //check if custom function is given\n      if (typeof this.getHalfStarVisible === 'function') {\n        this.halfStarVisible = this.getHalfStarVisible(this.rating);\n      } else {\n        this.halfStarVisible = StarRatingUtils.getHalfStarVisible(this.rating);\n      }\n    } else {\n      this.halfStarVisible = false;\n    }\n  }\n\n  getComponentClassNames() {\n    const classNames = [];\n    classNames.push(this.rating ? 'value-' + this.ratingAsInteger : 'value-0');\n    classNames.push(this.halfStarVisible ? 'half' : '');\n    classNames.push(this.hoverEnabled ? 'hover' : '');\n    const hoverRating = this.hoverRating ? 'hover-' + this.hoverRating : 'hover-0';\n    classNames.push(this.hoverEnabled ? hoverRating : '');\n    classNames.push(this.space ? 'space-' + this.space : '');\n    classNames.push(this.labelPosition ? 'label-' + this.labelPosition : '');\n    classNames.push(this.color ? 'color-' + this.color : '');\n    classNames.push(this.starType ? 'star-' + this.starType : '');\n    classNames.push(this.speed);\n    classNames.push(this.size);\n    classNames.push(this.readOnly ? 'read-only' : '');\n    classNames.push(this.disabled ? 'disabled' : '');\n    classNames.push(this.direction ? 'direction-' + this.direction : '');\n    return classNames.join(' ');\n  }\n\n  increment() {\n    //increment to next higher step\n    const absDiff = Math.abs(this.rating % this.step);\n    this.rating = this.rating + (absDiff > 0 ? this.step - absDiff : this.step);\n  }\n\n  decrement() {\n    //decrement to next lower step\n    const absDiff = Math.abs(this.rating % this.step);\n    this.rating = this.rating - (absDiff > 0 ? absDiff : this.step);\n  }\n\n  reset() {\n    this.rating = 0;\n  }\n\n}\n/**\n * Configuration service for the StarRating component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the star ratings used in the application.\n */\n\n\nclass StarRatingConfigService {\n  constructor() {\n    this._classEmpty = 'default-star-empty-icon';\n    this._classHalf = 'default-star-half-icon';\n    this._classFilled = 'default-star-filled-icon';\n    this._numOfStars = 5;\n    this._size = 'medium';\n    this._labelPosition = 'left';\n    this._speed = 'noticeable';\n    this._starType = 'svg';\n    this._assetsPath = 'assets/images/';\n    this._svgPath = this.assetsPath + 'star-rating.icons.svg';\n    this._svgEmptySymbolId = 'star-empty';\n    this._svgHalfSymbolId = 'star-half';\n    this._svgFilledSymbolId = 'star-filled';\n    this._svgPathEmpty = this.svgPath + '#' + this.svgEmptySymbolId;\n    this._svgPathHalf = this.svgPath + '#' + this.svgHalfSymbolId;\n    this._svgPathFilled = this.svgPath + '#' + this.svgFilledSymbolId;\n  }\n\n  get classEmpty() {\n    return this._classEmpty;\n  }\n\n  set classEmpty(classEmpty) {\n    this._classEmpty = classEmpty;\n  }\n\n  get classHalf() {\n    return this._classHalf;\n  }\n\n  set classHalf(classHalf) {\n    this._classHalf = classHalf;\n  }\n\n  get classFilled() {\n    return this._classFilled;\n  }\n\n  set classFilled(classFilled) {\n    this._classFilled = classFilled;\n  }\n\n  get numOfStars() {\n    return this._numOfStars;\n  }\n\n  set numOfStars(numOfStars) {\n    this._numOfStars = numOfStars;\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  set size(size) {\n    this._size = size;\n  }\n\n  get staticColor() {\n    return this._staticColor;\n  }\n\n  set staticColor(value) {\n    this._staticColor = value;\n  }\n\n  get labelPosition() {\n    return this._labelPosition;\n  }\n\n  set labelPosition(labelPosition) {\n    this._labelPosition = labelPosition;\n  }\n\n  get speed() {\n    return this._speed;\n  }\n\n  set speed(speed) {\n    this._speed = speed;\n  }\n\n  get starType() {\n    return this._starType;\n  }\n\n  set starType(starType) {\n    this._starType = starType;\n  }\n\n  get assetsPath() {\n    return this._assetsPath;\n  }\n\n  set assetsPath(assetsPath) {\n    this._assetsPath = assetsPath;\n  }\n\n  get svgPath() {\n    return this._svgPath;\n  }\n\n  set svgPath(svgPath) {\n    this._svgPath = svgPath;\n  }\n\n  get svgEmptySymbolId() {\n    return this._svgEmptySymbolId;\n  }\n\n  set svgEmptySymbolId(svgEmptySymbolId) {\n    this._svgEmptySymbolId = svgEmptySymbolId;\n  }\n\n  get svgHalfSymbolId() {\n    return this._svgHalfSymbolId;\n  }\n\n  set svgHalfSymbolId(svgHalfSymbolId) {\n    this._svgHalfSymbolId = svgHalfSymbolId;\n  }\n\n  get svgFilledSymbolId() {\n    return this._svgFilledSymbolId;\n  }\n\n  set svgFilledSymbolId(svgFilledSymbolId) {\n    this._svgFilledSymbolId = svgFilledSymbolId;\n  }\n\n  get svgPathEmpty() {\n    return this._svgPathEmpty;\n  }\n\n  set svgPathEmpty(svgPathEmpty) {\n    this._svgPathEmpty = svgPathEmpty;\n  }\n\n  get svgPathHalf() {\n    return this._svgPathHalf;\n  }\n\n  set svgPathHalf(svgPathHalf) {\n    this._svgPathHalf = svgPathHalf;\n  }\n\n  get svgPathFilled() {\n    return this._svgPathFilled;\n  }\n\n  set svgPathFilled(svgPathFilled) {\n    this._svgPathFilled = svgPathFilled;\n  }\n\n  getColor(rating, numOfStars, staticColor) {\n    rating = rating || 0; // if a fix color is set use this one\n\n    if (staticColor) {\n      return staticColor;\n    } // calculate size of smallest fraction\n\n\n    const fractionSize = numOfStars / 3; // apply color by fraction\n\n    let color = 'default';\n\n    if (rating > 0) {\n      color = 'negative';\n    }\n\n    if (rating > fractionSize) {\n      color = 'ok';\n    }\n\n    if (rating > fractionSize * 2) {\n      color = 'positive';\n    }\n\n    return color;\n  }\n\n  getHalfStarVisible(rating) {\n    return Math.abs(rating % 1) > 0;\n  }\n\n}\n\nclass StarRatingComponent extends StarRating {\n  constructor(config) {\n    super(config); //Outputs\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    this.starClickChange = new EventEmitter();\n    this.ratingChange = new EventEmitter();\n    this.hoverRatingChange = new EventEmitter();\n  }\n\n  saveOnClick($event) {\n    if (this.starClickChange) {\n      this.starClickChange.emit($event);\n    }\n  }\n\n  saveOnRatingChange($event) {\n    if (this.ratingChange) {\n      this.ratingChange.emit($event);\n    }\n  }\n\n  saveOnHover($event) {\n    if (this.hoverRatingChange) {\n      this.hoverRatingChange.emit($event);\n    }\n  }\n  /**ACCESSIBILITY **/\n  //Keyboard events\n\n\n  onKeyDown(event) {\n    if (!this.interactionPossible()) {\n      return;\n    }\n\n    const handlers = {\n      //Decrement\n      Minus: () => this.decrement(),\n      ArrowDown: () => this.decrement(),\n      ArrowLeft: () => this.decrement(),\n      //Increment\n      Plus: () => this.increment(),\n      ArrowRight: () => this.increment(),\n      ArrowUp: () => this.increment(),\n      //Reset\n      Backspace: () => this.reset(),\n      Delete: () => this.reset(),\n      Digit0: () => this.reset()\n    };\n\n    const handleDigits = eventCode => {\n      const dStr = 'Digit';\n      const digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);\n      this.rating = digit;\n    };\n\n    if (handlers[event['code']] || StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n      if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n        handleDigits(event['code']);\n      } else {\n        handlers[event['code']]();\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  } //Hover events\n\n\n  onStarHover(rating) {\n    if (!this.interactionPossible() || !this.hoverEnabled) {\n      return;\n    }\n\n    this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0; //update calculated Color\n\n    this.setColor(true); //fire onHoverRatingChange event\n\n    const $event = {\n      hoverRating: this.hoverRating\n    };\n    this.saveOnHover($event);\n  }\n\n  onStopHover() {\n    if (!this.interactionPossible() || !this.hoverEnabled) {\n      return;\n    }\n\n    this.hoverRating = 0; //update calculated Color\n\n    this.setColor();\n  } //Overrides\n\n\n  setRating(value) {\n    const initValue = this.rating;\n    super.setRating(value); //if value changed trigger valueAccessor events and outputs\n\n    if (initValue !== this.rating) {\n      const $event = {\n        rating: this.rating\n      };\n      this.saveOnRatingChange($event);\n    }\n  }\n  /**\n   * onStarClicked\n   *\n   * Is fired when a star is clicked. And updated the rating value.\n   * This function returns if the disabled or readOnly\n   * property is set. If provided it emits the onClick event\n   * handler with the actual rating value.\n   *\n   * @param rating\n   */\n\n\n  onStarClicked(rating) {\n    //fire onClick event\n    if (!this.interactionPossible()) {\n      return;\n    }\n\n    this.rating = rating;\n    const onClickEventObject = {\n      rating: this.rating\n    };\n    this.saveOnClick(onClickEventObject);\n  }\n\n}\n\nStarRatingComponent.ɵfac = function StarRatingComponent_Factory(t) {\n  return new (t || StarRatingComponent)(i0.ɵɵdirectiveInject(StarRatingConfigService));\n};\n\nStarRatingComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: StarRatingComponent,\n  selectors: [[\"star-rating\"]],\n  inputs: {\n    getHalfStarVisible: \"getHalfStarVisible\",\n    getColor: \"getColor\",\n    showHalfStars: \"showHalfStars\",\n    hoverEnabled: \"hoverEnabled\",\n    rating: \"rating\",\n    step: \"step\",\n    disabled: \"disabled\",\n    readOnly: \"readOnly\",\n    space: \"space\",\n    starType: \"starType\",\n    size: \"size\",\n    speed: \"speed\",\n    numOfStars: \"numOfStars\",\n    direction: \"direction\",\n    staticColor: \"staticColor\",\n    labelPosition: \"labelPosition\",\n    labelText: \"labelText\",\n    id: \"id\"\n  },\n  outputs: {\n    starClickChange: \"starClickChange\",\n    ratingChange: \"ratingChange\",\n    hoverRatingChange: \"hoverRatingChange\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 6,\n  consts: [[\"tabindex\", \"0\", 3, \"id\", \"keydown\", \"mouseleave\"], [\"class\", \"label-value\", 4, \"ngIf\"], [1, \"star-container\"], [\"class\", \"star\", 3, \"mouseenter\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"label-value\"], [1, \"star\", 3, \"mouseenter\", \"click\"], [3, \"class\", 4, \"ngIf\"], [\"class\", \"star-empty\", 4, \"ngIf\"], [\"class\", \"star-half\", 4, \"ngIf\"], [\"class\", \"star-filled\", 4, \"ngIf\"], [1, \"star-empty\"], [0, \"xmlns\", \"xlink\", \"http://www.w3.org/1999/xlink\"], [1, \"star-half\"], [1, \"star-filled\"]],\n  template: function StarRatingComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"keydown\", function StarRatingComponent_Template_div_keydown_0_listener($event) {\n        return ctx.onKeyDown($event);\n      })(\"mouseleave\", function StarRatingComponent_Template_div_mouseleave_0_listener() {\n        return ctx.onStopHover();\n      });\n      i0.ɵɵtemplate(1, StarRatingComponent_div_1_Template, 2, 1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵtemplate(3, StarRatingComponent_div_3_Template, 7, 6, \"div\", 3);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMapInterpolate1(\"rating \", ctx.getComponentClassNames(), \"\");\n      i0.ɵɵpropertyInterpolate(\"id\", ctx.id);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.labelText);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.stars);\n    }\n  },\n  directives: [i2.NgIf, i2.NgForOf],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StarRatingComponent, [{\n    type: Component,\n    args: [{\n      selector: 'star-rating',\n      inputs: ['getHalfStarVisible', 'getColor', 'showHalfStars', 'hoverEnabled', 'rating', 'step', 'disabled', 'readOnly', 'space', 'starType', 'size', 'speed', 'numOfStars', 'direction', 'staticColor', //, 'labelVisible'\n      'labelPosition', 'labelText', 'id'],\n      outputs: ['starClickChange', 'ratingChange', 'hoverRatingChange'],\n      template: \"<div id=\\\"{{id}}\\\" class=\\\"rating {{getComponentClassNames()}}\\\" tabindex=\\\"0\\\"\\n  (keydown)=\\\"onKeyDown($event)\\\" (mouseleave)=\\\"onStopHover()\\\">\\n  <div *ngIf=\\\"labelText\\\" class=\\\"label-value\\\">{{labelText}}</div>\\n  <div class=\\\"star-container\\\">\\n    <div class=\\\"star\\\" (mouseenter)=\\\"onStarHover(star)\\\"\\n      *ngFor=\\\"let star of stars\\\" (click)=\\\"onStarClicked(star)\\\">\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-empty {{classEmpty}}\\\"></i>\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-half {{classHalf}}\\\"></i>\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-filled {{classFilled}}\\\"></i>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-empty\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathEmpty\\\"></use>\\n      </svg>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-half\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathHalf\\\"></use>\\n      </svg>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-filled\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathFilled\\\"></use>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\",\n      styles: []\n    }]\n  }], function () {\n    return [{\n      type: StarRatingConfigService\n    }];\n  }, null);\n})();\n\nconst STAR_RATING_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => StarRatingControlComponent),\n  multi: true\n};\n\nclass StarRatingControlComponent extends StarRating {\n  constructor(config) {\n    super(config); //Outputs\n    ///////////////////////////////////////////////////////////////////////////////////////////\n\n    this.starClickChange = new EventEmitter();\n    this.ratingChange = new EventEmitter();\n    this.hoverRatingChange = new EventEmitter();\n    this.onModelChangeRegistered = false;\n    this.onTouchRegistered = false;\n  }\n\n  saveOnClick($event) {\n    if (this.starClickChange) {\n      this.starClickChange.emit($event);\n    }\n  }\n\n  saveOnRatingChange($event) {\n    if (this.ratingChange) {\n      this.ratingChange.emit($event);\n    }\n  }\n\n  saveOnHover($event) {\n    if (this.hoverRatingChange) {\n      this.hoverRatingChange.emit($event);\n    }\n  }\n\n  saveOnTouch() {\n    if (this.onTouchRegistered) {\n      this.onTouch();\n    }\n  }\n\n  saveOnModelChange(value) {\n    if (this.onModelChangeRegistered) {\n      this.onModelChange(value);\n    }\n  }\n  /**ACCESSIBILITY **/\n  //Keyboard events\n\n\n  onKeyDown(event) {\n    if (!this.interactionPossible()) {\n      return;\n    }\n\n    const handlers = {\n      //Decrement\n      Minus: () => this.decrement(),\n      ArrowDown: () => this.decrement(),\n      ArrowLeft: () => this.decrement(),\n      //Increment\n      Plus: () => this.increment(),\n      ArrowRight: () => this.increment(),\n      ArrowUp: () => this.increment(),\n      //Reset\n      Backspace: () => this.reset(),\n      Delete: () => this.reset(),\n      Digit0: () => this.reset()\n    };\n\n    const handleDigits = eventCode => {\n      const dStr = 'Digit';\n      const digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);\n      this.rating = digit;\n    };\n\n    if (handlers[event['code']] || StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n      if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n        handleDigits(event['code']);\n      } else {\n        handlers[event['code']]();\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    this.saveOnTouch();\n  } //Focus events\n\n\n  onBlur(event) {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.saveOnTouch();\n  }\n\n  onFocus(event) {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.saveOnTouch();\n  } //Hover events\n\n\n  onStarHover(rating) {\n    if (!this.interactionPossible() || !this.hoverEnabled) {\n      return;\n    }\n\n    this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0; //fire onHoverRatingChange event\n\n    const $event = {\n      hoverRating: this.hoverRating\n    };\n    this.saveOnHover($event);\n  }\n  /**Form Control - ControlValueAccessor implementation**/\n\n\n  writeValue(obj) {\n    this.rating = obj;\n  }\n\n  registerOnChange(fn) {\n    this.onModelChange = fn;\n    this.onModelChangeRegistered = true;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouch = fn;\n    this.onTouchRegistered = true;\n  } //Overrides\n\n\n  setRating(value) {\n    const initValue = this.rating;\n    super.setRating(value); //if value changed trigger valueAccessor events and outputs\n\n    if (initValue !== this.rating) {\n      const $event = {\n        rating: this.rating\n      };\n      this.saveOnRatingChange($event);\n      this.saveOnModelChange(this.rating);\n    }\n  }\n  /**\n   * onStarClicked\n   *\n   * Is fired when a star is clicked. And updated the rating value.\n   * This function returns if the disabled or readOnly\n   * property is set. If provided it emits the onClick event\n   * handler with the actual rating value.\n   *\n   * @param rating\n   */\n\n\n  onStarClicked(rating) {\n    //fire onClick event\n    if (!this.interactionPossible()) {\n      return;\n    }\n\n    this.rating = rating;\n    const onClickEventObject = {\n      rating: this.rating\n    };\n    this.saveOnClick(onClickEventObject);\n  }\n\n}\n\nStarRatingControlComponent.ɵfac = function StarRatingControlComponent_Factory(t) {\n  return new (t || StarRatingControlComponent)(i0.ɵɵdirectiveInject(StarRatingConfigService));\n};\n\nStarRatingControlComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: StarRatingControlComponent,\n  selectors: [[\"star-rating-control\"]],\n  inputs: {\n    getHalfStarVisible: \"getHalfStarVisible\",\n    getColor: \"getColor\",\n    showHalfStars: \"showHalfStars\",\n    hoverEnabled: \"hoverEnabled\",\n    rating: \"rating\",\n    step: \"step\",\n    disabled: \"disabled\",\n    readOnly: \"readOnly\",\n    space: \"space\",\n    starType: \"starType\",\n    size: \"size\",\n    speed: \"speed\",\n    numOfStars: \"numOfStars\",\n    direction: \"direction\",\n    staticColor: \"staticColor\",\n    labelPosition: \"labelPosition\",\n    labelText: \"labelText\",\n    id: \"id\"\n  },\n  outputs: {\n    starClickChange: \"starClickChange\",\n    ratingChange: \"ratingChange\",\n    hoverRatingChange: \"hoverRatingChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([STAR_RATING_CONTROL_ACCESSOR]), i0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 6,\n  consts: [[\"tabindex\", \"0\", 3, \"id\", \"keydown\", \"blur\", \"focus\", \"mouseleave\"], [\"class\", \"label-value\", 4, \"ngIf\"], [1, \"star-container\"], [\"class\", \"star\", 3, \"mouseenter\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"label-value\"], [1, \"star\", 3, \"mouseenter\", \"click\"], [3, \"class\", 4, \"ngIf\"], [\"class\", \"star-empty\", 4, \"ngIf\"], [\"class\", \"star-half\", 4, \"ngIf\"], [\"class\", \"star-filled\", 4, \"ngIf\"], [1, \"star-empty\"], [0, \"xmlns\", \"xlink\", \"http://www.w3.org/1999/xlink\"], [1, \"star-half\"], [1, \"star-filled\"]],\n  template: function StarRatingControlComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"keydown\", function StarRatingControlComponent_Template_div_keydown_0_listener($event) {\n        return ctx.onKeyDown($event);\n      })(\"blur\", function StarRatingControlComponent_Template_div_blur_0_listener($event) {\n        return ctx.onBlur($event);\n      })(\"focus\", function StarRatingControlComponent_Template_div_focus_0_listener($event) {\n        return ctx.onFocus($event);\n      })(\"mouseleave\", function StarRatingControlComponent_Template_div_mouseleave_0_listener() {\n        return ctx.onStarHover(0);\n      });\n      i0.ɵɵtemplate(1, StarRatingControlComponent_div_1_Template, 2, 1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵtemplate(3, StarRatingControlComponent_div_3_Template, 7, 6, \"div\", 3);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMapInterpolate1(\"rating \", ctx.getComponentClassNames(), \"\");\n      i0.ɵɵpropertyInterpolate(\"id\", ctx.id);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.labelText);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.stars);\n    }\n  },\n  directives: [i2.NgIf, i2.NgForOf],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StarRatingControlComponent, [{\n    type: Component,\n    args: [{\n      selector: 'star-rating-control',\n      providers: [STAR_RATING_CONTROL_ACCESSOR],\n      inputs: ['getHalfStarVisible', 'getColor', 'showHalfStars', 'hoverEnabled', 'rating', 'step', 'disabled', 'readOnly', 'space', 'starType', 'size', 'speed', 'numOfStars', 'direction', 'staticColor', //, 'labelVisible'\n      'labelPosition', 'labelText', 'id'],\n      outputs: ['starClickChange', 'ratingChange', 'hoverRatingChange'],\n      template: \"<div id=\\\"{{id}}\\\" class=\\\"rating {{getComponentClassNames()}}\\\" tabindex=\\\"0\\\"\\n  (keydown)=\\\"onKeyDown($event)\\\" (blur)=\\\"onBlur($event)\\\"\\n  (focus)=\\\"onFocus($event)\\\" (mouseleave)=\\\"onStarHover(0)\\\">\\n  <div *ngIf=\\\"labelText\\\" class=\\\"label-value\\\">{{labelText}}</div>\\n  <div class=\\\"star-container\\\">\\n    <div class=\\\"star\\\" (mouseenter)=\\\"onStarHover(star)\\\"\\n      *ngFor=\\\"let star of stars\\\" (click)=\\\"onStarClicked(star)\\\">\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-empty {{classEmpty}}\\\"></i>\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-half {{classHalf}}\\\"></i>\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-filled {{classFilled}}\\\"></i>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-empty\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathEmpty\\\"></use>\\n      </svg>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-half\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathHalf\\\"></use>\\n      </svg>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-filled\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathFilled\\\"></use>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\",\n      styles: []\n    }]\n  }], function () {\n    return [{\n      type: StarRatingConfigService\n    }];\n  }, null);\n})();\n\nconst DECLARATIONS = [StarRatingComponent, StarRatingControlComponent];\nconst EXPORTS = [DECLARATIONS];\n\nclass StarRatingModule {\n  static forRoot() {\n    return {\n      ngModule: StarRatingModule,\n      providers: [StarRatingConfigService]\n    };\n  }\n\n  static forChild() {\n    return {\n      ngModule: StarRatingModule,\n      providers: []\n    };\n  }\n\n}\n\nStarRatingModule.ɵfac = function StarRatingModule_Factory(t) {\n  return new (t || StarRatingModule)();\n};\n\nStarRatingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: StarRatingModule\n});\nStarRatingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StarRatingModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [DECLARATIONS],\n      exports: [EXPORTS]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { StarRating, StarRatingComponent, StarRatingConfig, StarRatingConfigService, StarRatingControlComponent, StarRatingModule, StarRatingUtils };","map":{"version":3,"sources":["/home/anon/Documents/ave/node_modules/angular-star-rating/fesm2015/angular-star-rating.mjs"],"names":["i0","EventEmitter","Component","forwardRef","NgModule","i2","CommonModule","NG_VALUE_ACCESSOR","StarRatingConfig","StarRatingUtils","getStarsArray","numOfStars","stars","i","push","getHalfStarVisible","rating","Math","abs","getColor","staticColor","fractionSize","color","isDigitKeyEventCode","eventCode","indexOf","StarRating","constructor","config","classEmpty","classHalf","classFilled","pathEmpty","svgPathEmpty","pathHalf","svgPathHalf","pathFilled","svgPathFilled","step","value","setRating","showHalfStars","_showHalfStars","setHalfStarVisible","id","_id","focus","_focus","labelText","_labelText","labelPosition","_labelPosition","labelVisible","_labelVisible","hoverEnabled","_hoverEnabled","undefined","_staticColor","setColor","direction","_direction","_numOfStars","hoverRating","_hoverRating","speed","_speed","size","_size","starType","_starType","space","_space","readOnly","_readOnly","disabled","_disabled","_step","_rating","newRating","ratingAsInteger","parseInt","toString","svgVisible","interactionPossible","useHoverValue","console","log","ratingValue","halfStarVisible","getComponentClassNames","classNames","join","increment","absDiff","decrement","reset","StarRatingConfigService","_classEmpty","_classHalf","_classFilled","_assetsPath","_svgPath","assetsPath","_svgEmptySymbolId","_svgHalfSymbolId","_svgFilledSymbolId","_svgPathEmpty","svgPath","svgEmptySymbolId","_svgPathHalf","svgHalfSymbolId","_svgPathFilled","svgFilledSymbolId","StarRatingComponent","starClickChange","ratingChange","hoverRatingChange","saveOnClick","$event","emit","saveOnRatingChange","saveOnHover","onKeyDown","event","handlers","Minus","ArrowDown","ArrowLeft","Plus","ArrowRight","ArrowUp","Backspace","Delete","Digit0","handleDigits","dStr","digit","substr","length","preventDefault","stopPropagation","onStarHover","onStopHover","initValue","onStarClicked","onClickEventObject","ɵfac","ɵcmp","NgIf","NgForOf","type","args","selector","inputs","outputs","template","styles","STAR_RATING_CONTROL_ACCESSOR","provide","useExisting","StarRatingControlComponent","multi","onModelChangeRegistered","onTouchRegistered","saveOnTouch","onTouch","saveOnModelChange","onModelChange","onBlur","onFocus","writeValue","obj","registerOnChange","fn","registerOnTouched","providers","DECLARATIONS","EXPORTS","StarRatingModule","forRoot","ngModule","forChild","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, forwardRef, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nclass StarRatingConfig {\n}\n\nclass StarRatingUtils {\n    //Static methods\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    /*\n     * getStarsArray\n     *\n     * returns an array of increasing numbers starting at 1\n     *\n     * @param numOfStars\n     * @returns {Array}\n     */\n    static getStarsArray(numOfStars) {\n        let stars = [];\n        for (let i = 0; i < numOfStars; i++) {\n            stars.push(i + 1);\n        }\n        return stars;\n    }\n    /*\n     * getHalfStarVisible\n     *\n     * Returns true if there should be a half star visible, and false if not.\n     *\n     * @param rating\n     * @returns {boolean}\n     */\n    static getHalfStarVisible(rating) {\n        return Math.abs(rating % 1) > 0;\n    }\n    /*\n     * getColor\n     *\n     * The default function for color calculation\n     * based on the current rating and the the number of stars possible.\n     * If a staticColor is set the function will use it as return value.\n     *\n     * @param rating\n     * @param numOfStars\n     * @param staticColor\n     * @returns {starRatingColor}\n     */\n    static getColor(rating, numOfStars, staticColor) {\n        rating = rating || 0;\n        //if a fix color is set use this one\n        if (staticColor) {\n            return staticColor;\n        }\n        //calculate size of smallest fraction\n        let fractionSize = numOfStars / 3;\n        //apply color by fraction\n        let color = 'default';\n        if (rating > 0) {\n            color = 'negative';\n        }\n        if (rating > fractionSize) {\n            color = 'ok';\n        }\n        if (rating > fractionSize * 2) {\n            color = 'positive';\n        }\n        return color;\n    }\n    /*\n     * isDigitKeyEventCode\n     * detects digit key event sodes\n     * @param eventCode\n     * @returns {boolean}\n     */\n    static isDigitKeyEventCode(eventCode) {\n        return eventCode.indexOf('Digit') === 0;\n    }\n}\n\nclass StarRating {\n    constructor(config) {\n        this.config = config;\n        //set default ctrl props\n        this.classEmpty = this.config.classEmpty;\n        this.classHalf = this.config.classHalf;\n        this.classFilled = this.config.classFilled;\n        this.pathEmpty = this.config.svgPathEmpty;\n        this.pathHalf = this.config.svgPathHalf;\n        this.pathFilled = this.config.svgPathFilled;\n        //set default Component Inputs\n        if ('getColor' in this.config &&\n            typeof this.config.getColor === 'function') {\n            this.getColor = this.config.getColor;\n        }\n        if ('getHalfStarVisible' in this.config &&\n            typeof this.config.getHalfStarVisible === 'function') {\n            this.getHalfStarVisible = this.config.getHalfStarVisible;\n        }\n        this.numOfStars = this.config.numOfStars;\n        this.rating = 0;\n        this.step = 1;\n    }\n    /////////////////////////////////////////////\n    set rating(value) {\n        this.setRating(value);\n    }\n    get showHalfStars() {\n        return this._showHalfStars;\n    }\n    set showHalfStars(value) {\n        this._showHalfStars = !!value;\n        //update halfStarVisible\n        this.setHalfStarVisible();\n    }\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || '';\n    }\n    get focus() {\n        return this._focus;\n    }\n    set focus(value) {\n        this._focus = !!value;\n    }\n    get labelText() {\n        return this._labelText;\n    }\n    set labelText(value) {\n        this._labelText = value;\n    }\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(value) {\n        this._labelPosition = value || this.config.labelPosition;\n    }\n    get labelVisible() {\n        return this._labelVisible;\n    }\n    set labelVisible(value) {\n        this._labelVisible = !!value;\n    }\n    get hoverEnabled() {\n        return this._hoverEnabled;\n    }\n    set hoverEnabled(value) {\n        this._hoverEnabled = value !== undefined ? !!value : false;\n    }\n    get staticColor() {\n        return this._staticColor || this.config.staticColor || undefined;\n    }\n    set staticColor(value) {\n        this._staticColor = value;\n        //update color.\n        this.setColor();\n    }\n    get direction() {\n        return this._direction;\n    }\n    set direction(value) {\n        this._direction = value || undefined;\n    }\n    get numOfStars() {\n        return this._numOfStars;\n    }\n    set numOfStars(value) {\n        this._numOfStars = value > 0 ? value : this.config.numOfStars;\n        //update stars array\n        this.stars = StarRatingUtils.getStarsArray(this.numOfStars);\n        //update color\n        this.setColor();\n    }\n    get hoverRating() {\n        return this._hoverRating;\n    }\n    set hoverRating(value) {\n        this._hoverRating = value > 0 ? value : 0;\n    }\n    get speed() {\n        return this._speed;\n    }\n    set speed(value) {\n        this._speed = value || this.config.speed;\n    }\n    get size() {\n        return this._size || this.config.size;\n    }\n    set size(value) {\n        this._size = value;\n    }\n    get starType() {\n        return this._starType || this.config.starType;\n    }\n    set starType(value) {\n        this._starType = value;\n    }\n    get space() {\n        return this._space;\n    }\n    set space(value) {\n        this._space = value;\n    }\n    get readOnly() {\n        return this._readOnly;\n    }\n    set readOnly(value) {\n        this._readOnly = !!value;\n    }\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = !!value;\n    }\n    get step() {\n        return this._step;\n    }\n    set step(value) {\n        this._step = value > 0 ? value : 1;\n    }\n    get rating() {\n        return this._rating;\n    }\n    /**\n     * setRating\n     * I use a setter function instead of a set method to enable overrides for this function.\n     * @param value\n     */\n    setRating(value) {\n        //validate and apply newRating\n        let newRating = 0;\n        if (value >= 0 && value <= this.numOfStars) {\n            newRating = value;\n        }\n        //limit max value to max number of stars\n        if (value > this.numOfStars) {\n            newRating = this.numOfStars;\n        }\n        this._rating = newRating;\n        //update ratingAsInteger. rating parsed to int for the value-[n] modifier\n        this.ratingAsInteger = parseInt(this._rating.toString(), 10);\n        //update halfStarsVisible\n        this.setHalfStarVisible();\n        //update calculated Color\n        this.setColor();\n    }\n    svgVisible() {\n        return this.starType === 'svg';\n    }\n    interactionPossible() {\n        return !this.readOnly && !this.disabled;\n    }\n    setColor(useHoverValue = false) {\n        console.log('useHoverValue: ', useHoverValue);\n        //check if custom function is given\n        const ratingValue = useHoverValue ? this.hoverRating : this.rating;\n        if (typeof this.getColor === 'function') {\n            this.color = this.getColor(ratingValue, this.numOfStars, this.staticColor);\n        }\n        else {\n            this.color = StarRatingUtils.getColor(ratingValue, this.numOfStars, this.staticColor);\n        }\n    }\n    setHalfStarVisible() {\n        //update halfStarVisible\n        if (this.showHalfStars) {\n            //check if custom function is given\n            if (typeof this.getHalfStarVisible === 'function') {\n                this.halfStarVisible = this.getHalfStarVisible(this.rating);\n            }\n            else {\n                this.halfStarVisible = StarRatingUtils.getHalfStarVisible(this.rating);\n            }\n        }\n        else {\n            this.halfStarVisible = false;\n        }\n    }\n    getComponentClassNames() {\n        const classNames = [];\n        classNames.push(this.rating ? 'value-' + this.ratingAsInteger : 'value-0');\n        classNames.push(this.halfStarVisible ? 'half' : '');\n        classNames.push(this.hoverEnabled ? 'hover' : '');\n        const hoverRating = this.hoverRating\n            ? 'hover-' + this.hoverRating\n            : 'hover-0';\n        classNames.push(this.hoverEnabled ? hoverRating : '');\n        classNames.push(this.space ? 'space-' + this.space : '');\n        classNames.push(this.labelPosition ? 'label-' + this.labelPosition : '');\n        classNames.push(this.color ? 'color-' + this.color : '');\n        classNames.push(this.starType ? 'star-' + this.starType : '');\n        classNames.push(this.speed);\n        classNames.push(this.size);\n        classNames.push(this.readOnly ? 'read-only' : '');\n        classNames.push(this.disabled ? 'disabled' : '');\n        classNames.push(this.direction ? 'direction-' + this.direction : '');\n        return classNames.join(' ');\n    }\n    increment() {\n        //increment to next higher step\n        const absDiff = Math.abs(this.rating % this.step);\n        this.rating = this.rating + (absDiff > 0 ? this.step - absDiff : this.step);\n    }\n    decrement() {\n        //decrement to next lower step\n        const absDiff = Math.abs(this.rating % this.step);\n        this.rating = this.rating - (absDiff > 0 ? absDiff : this.step);\n    }\n    reset() {\n        this.rating = 0;\n    }\n}\n\n/**\n * Configuration service for the StarRating component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the star ratings used in the application.\n */\nclass StarRatingConfigService {\n    constructor() {\n        this._classEmpty = 'default-star-empty-icon';\n        this._classHalf = 'default-star-half-icon';\n        this._classFilled = 'default-star-filled-icon';\n        this._numOfStars = 5;\n        this._size = 'medium';\n        this._labelPosition = 'left';\n        this._speed = 'noticeable';\n        this._starType = 'svg';\n        this._assetsPath = 'assets/images/';\n        this._svgPath = this.assetsPath + 'star-rating.icons.svg';\n        this._svgEmptySymbolId = 'star-empty';\n        this._svgHalfSymbolId = 'star-half';\n        this._svgFilledSymbolId = 'star-filled';\n        this._svgPathEmpty = this.svgPath + '#' + this.svgEmptySymbolId;\n        this._svgPathHalf = this.svgPath + '#' + this.svgHalfSymbolId;\n        this._svgPathFilled = this.svgPath + '#' + this.svgFilledSymbolId;\n    }\n    get classEmpty() {\n        return this._classEmpty;\n    }\n    set classEmpty(classEmpty) {\n        this._classEmpty = classEmpty;\n    }\n    get classHalf() {\n        return this._classHalf;\n    }\n    set classHalf(classHalf) {\n        this._classHalf = classHalf;\n    }\n    get classFilled() {\n        return this._classFilled;\n    }\n    set classFilled(classFilled) {\n        this._classFilled = classFilled;\n    }\n    get numOfStars() {\n        return this._numOfStars;\n    }\n    set numOfStars(numOfStars) {\n        this._numOfStars = numOfStars;\n    }\n    get size() {\n        return this._size;\n    }\n    set size(size) {\n        this._size = size;\n    }\n    get staticColor() {\n        return this._staticColor;\n    }\n    set staticColor(value) {\n        this._staticColor = value;\n    }\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(labelPosition) {\n        this._labelPosition = labelPosition;\n    }\n    get speed() {\n        return this._speed;\n    }\n    set speed(speed) {\n        this._speed = speed;\n    }\n    get starType() {\n        return this._starType;\n    }\n    set starType(starType) {\n        this._starType = starType;\n    }\n    get assetsPath() {\n        return this._assetsPath;\n    }\n    set assetsPath(assetsPath) {\n        this._assetsPath = assetsPath;\n    }\n    get svgPath() {\n        return this._svgPath;\n    }\n    set svgPath(svgPath) {\n        this._svgPath = svgPath;\n    }\n    get svgEmptySymbolId() {\n        return this._svgEmptySymbolId;\n    }\n    set svgEmptySymbolId(svgEmptySymbolId) {\n        this._svgEmptySymbolId = svgEmptySymbolId;\n    }\n    get svgHalfSymbolId() {\n        return this._svgHalfSymbolId;\n    }\n    set svgHalfSymbolId(svgHalfSymbolId) {\n        this._svgHalfSymbolId = svgHalfSymbolId;\n    }\n    get svgFilledSymbolId() {\n        return this._svgFilledSymbolId;\n    }\n    set svgFilledSymbolId(svgFilledSymbolId) {\n        this._svgFilledSymbolId = svgFilledSymbolId;\n    }\n    get svgPathEmpty() {\n        return this._svgPathEmpty;\n    }\n    set svgPathEmpty(svgPathEmpty) {\n        this._svgPathEmpty = svgPathEmpty;\n    }\n    get svgPathHalf() {\n        return this._svgPathHalf;\n    }\n    set svgPathHalf(svgPathHalf) {\n        this._svgPathHalf = svgPathHalf;\n    }\n    get svgPathFilled() {\n        return this._svgPathFilled;\n    }\n    set svgPathFilled(svgPathFilled) {\n        this._svgPathFilled = svgPathFilled;\n    }\n    getColor(rating, numOfStars, staticColor) {\n        rating = rating || 0;\n        // if a fix color is set use this one\n        if (staticColor) {\n            return staticColor;\n        }\n        // calculate size of smallest fraction\n        const fractionSize = numOfStars / 3;\n        // apply color by fraction\n        let color = 'default';\n        if (rating > 0) {\n            color = 'negative';\n        }\n        if (rating > fractionSize) {\n            color = 'ok';\n        }\n        if (rating > fractionSize * 2) {\n            color = 'positive';\n        }\n        return color;\n    }\n    getHalfStarVisible(rating) {\n        return Math.abs(rating % 1) > 0;\n    }\n}\n\nclass StarRatingComponent extends StarRating {\n    constructor(config) {\n        super(config);\n        //Outputs\n        ///////////////////////////////////////////////////////////////////////////////////////////\n        this.starClickChange = new EventEmitter();\n        this.ratingChange = new EventEmitter();\n        this.hoverRatingChange = new EventEmitter();\n    }\n    saveOnClick($event) {\n        if (this.starClickChange) {\n            this.starClickChange.emit($event);\n        }\n    }\n    saveOnRatingChange($event) {\n        if (this.ratingChange) {\n            this.ratingChange.emit($event);\n        }\n    }\n    saveOnHover($event) {\n        if (this.hoverRatingChange) {\n            this.hoverRatingChange.emit($event);\n        }\n    }\n    /**ACCESSIBILITY **/\n    //Keyboard events\n    onKeyDown(event) {\n        if (!this.interactionPossible()) {\n            return;\n        }\n        const handlers = {\n            //Decrement\n            Minus: () => this.decrement(),\n            ArrowDown: () => this.decrement(),\n            ArrowLeft: () => this.decrement(),\n            //Increment\n            Plus: () => this.increment(),\n            ArrowRight: () => this.increment(),\n            ArrowUp: () => this.increment(),\n            //Reset\n            Backspace: () => this.reset(),\n            Delete: () => this.reset(),\n            Digit0: () => this.reset(),\n        };\n        const handleDigits = (eventCode) => {\n            const dStr = 'Digit';\n            const digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);\n            this.rating = digit;\n        };\n        if (handlers[event['code']] ||\n            StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n            if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n                handleDigits(event['code']);\n            }\n            else {\n                handlers[event['code']]();\n            }\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    //Hover events\n    onStarHover(rating) {\n        if (!this.interactionPossible() || !this.hoverEnabled) {\n            return;\n        }\n        this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0;\n        //update calculated Color\n        this.setColor(true);\n        //fire onHoverRatingChange event\n        const $event = { hoverRating: this.hoverRating };\n        this.saveOnHover($event);\n    }\n    onStopHover() {\n        if (!this.interactionPossible() || !this.hoverEnabled) {\n            return;\n        }\n        this.hoverRating = 0;\n        //update calculated Color\n        this.setColor();\n    }\n    //Overrides\n    setRating(value) {\n        const initValue = this.rating;\n        super.setRating(value);\n        //if value changed trigger valueAccessor events and outputs\n        if (initValue !== this.rating) {\n            const $event = { rating: this.rating };\n            this.saveOnRatingChange($event);\n        }\n    }\n    /**\n     * onStarClicked\n     *\n     * Is fired when a star is clicked. And updated the rating value.\n     * This function returns if the disabled or readOnly\n     * property is set. If provided it emits the onClick event\n     * handler with the actual rating value.\n     *\n     * @param rating\n     */\n    onStarClicked(rating) {\n        //fire onClick event\n        if (!this.interactionPossible()) {\n            return;\n        }\n        this.rating = rating;\n        const onClickEventObject = {\n            rating: this.rating,\n        };\n        this.saveOnClick(onClickEventObject);\n    }\n}\nStarRatingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StarRatingComponent, deps: [{ token: StarRatingConfigService }], target: i0.ɵɵFactoryTarget.Component });\nStarRatingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0\", type: StarRatingComponent, selector: \"star-rating\", inputs: { getHalfStarVisible: \"getHalfStarVisible\", getColor: \"getColor\", showHalfStars: \"showHalfStars\", hoverEnabled: \"hoverEnabled\", rating: \"rating\", step: \"step\", disabled: \"disabled\", readOnly: \"readOnly\", space: \"space\", starType: \"starType\", size: \"size\", speed: \"speed\", numOfStars: \"numOfStars\", direction: \"direction\", staticColor: \"staticColor\", labelPosition: \"labelPosition\", labelText: \"labelText\", id: \"id\" }, outputs: { starClickChange: \"starClickChange\", ratingChange: \"ratingChange\", hoverRatingChange: \"hoverRatingChange\" }, usesInheritance: true, ngImport: i0, template: \"<div id=\\\"{{id}}\\\" class=\\\"rating {{getComponentClassNames()}}\\\" tabindex=\\\"0\\\"\\n  (keydown)=\\\"onKeyDown($event)\\\" (mouseleave)=\\\"onStopHover()\\\">\\n  <div *ngIf=\\\"labelText\\\" class=\\\"label-value\\\">{{labelText}}</div>\\n  <div class=\\\"star-container\\\">\\n    <div class=\\\"star\\\" (mouseenter)=\\\"onStarHover(star)\\\"\\n      *ngFor=\\\"let star of stars\\\" (click)=\\\"onStarClicked(star)\\\">\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-empty {{classEmpty}}\\\"></i>\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-half {{classHalf}}\\\"></i>\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-filled {{classFilled}}\\\"></i>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-empty\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathEmpty\\\"></use>\\n      </svg>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-half\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathHalf\\\"></use>\\n      </svg>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-filled\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathFilled\\\"></use>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\", directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StarRatingComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'star-rating', inputs: [\n                        'getHalfStarVisible',\n                        'getColor',\n                        'showHalfStars',\n                        'hoverEnabled',\n                        'rating',\n                        'step',\n                        'disabled',\n                        'readOnly',\n                        'space',\n                        'starType',\n                        'size',\n                        'speed',\n                        'numOfStars',\n                        'direction',\n                        'staticColor',\n                        //, 'labelVisible'\n                        'labelPosition',\n                        'labelText',\n                        'id',\n                    ], outputs: ['starClickChange', 'ratingChange', 'hoverRatingChange'], template: \"<div id=\\\"{{id}}\\\" class=\\\"rating {{getComponentClassNames()}}\\\" tabindex=\\\"0\\\"\\n  (keydown)=\\\"onKeyDown($event)\\\" (mouseleave)=\\\"onStopHover()\\\">\\n  <div *ngIf=\\\"labelText\\\" class=\\\"label-value\\\">{{labelText}}</div>\\n  <div class=\\\"star-container\\\">\\n    <div class=\\\"star\\\" (mouseenter)=\\\"onStarHover(star)\\\"\\n      *ngFor=\\\"let star of stars\\\" (click)=\\\"onStarClicked(star)\\\">\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-empty {{classEmpty}}\\\"></i>\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-half {{classHalf}}\\\"></i>\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-filled {{classFilled}}\\\"></i>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-empty\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathEmpty\\\"></use>\\n      </svg>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-half\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathHalf\\\"></use>\\n      </svg>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-filled\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathFilled\\\"></use>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [] }]\n        }], ctorParameters: function () { return [{ type: StarRatingConfigService }]; } });\n\nconst STAR_RATING_CONTROL_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => StarRatingControlComponent),\n    multi: true,\n};\nclass StarRatingControlComponent extends StarRating {\n    constructor(config) {\n        super(config);\n        //Outputs\n        ///////////////////////////////////////////////////////////////////////////////////////////\n        this.starClickChange = new EventEmitter();\n        this.ratingChange = new EventEmitter();\n        this.hoverRatingChange = new EventEmitter();\n        this.onModelChangeRegistered = false;\n        this.onTouchRegistered = false;\n    }\n    saveOnClick($event) {\n        if (this.starClickChange) {\n            this.starClickChange.emit($event);\n        }\n    }\n    saveOnRatingChange($event) {\n        if (this.ratingChange) {\n            this.ratingChange.emit($event);\n        }\n    }\n    saveOnHover($event) {\n        if (this.hoverRatingChange) {\n            this.hoverRatingChange.emit($event);\n        }\n    }\n    saveOnTouch() {\n        if (this.onTouchRegistered) {\n            this.onTouch();\n        }\n    }\n    saveOnModelChange(value) {\n        if (this.onModelChangeRegistered) {\n            this.onModelChange(value);\n        }\n    }\n    /**ACCESSIBILITY **/\n    //Keyboard events\n    onKeyDown(event) {\n        if (!this.interactionPossible()) {\n            return;\n        }\n        const handlers = {\n            //Decrement\n            Minus: () => this.decrement(),\n            ArrowDown: () => this.decrement(),\n            ArrowLeft: () => this.decrement(),\n            //Increment\n            Plus: () => this.increment(),\n            ArrowRight: () => this.increment(),\n            ArrowUp: () => this.increment(),\n            //Reset\n            Backspace: () => this.reset(),\n            Delete: () => this.reset(),\n            Digit0: () => this.reset(),\n        };\n        const handleDigits = (eventCode) => {\n            const dStr = 'Digit';\n            const digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);\n            this.rating = digit;\n        };\n        if (handlers[event['code']] ||\n            StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n            if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n                handleDigits(event['code']);\n            }\n            else {\n                handlers[event['code']]();\n            }\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        this.saveOnTouch();\n    }\n    //Focus events\n    onBlur(event) {\n        this.focus = false;\n        event.preventDefault();\n        event.stopPropagation();\n        this.saveOnTouch();\n    }\n    onFocus(event) {\n        this.focus = true;\n        event.preventDefault();\n        event.stopPropagation();\n        this.saveOnTouch();\n    }\n    //Hover events\n    onStarHover(rating) {\n        if (!this.interactionPossible() || !this.hoverEnabled) {\n            return;\n        }\n        this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0;\n        //fire onHoverRatingChange event\n        const $event = { hoverRating: this.hoverRating };\n        this.saveOnHover($event);\n    }\n    /**Form Control - ControlValueAccessor implementation**/\n    writeValue(obj) {\n        this.rating = obj;\n    }\n    registerOnChange(fn) {\n        this.onModelChange = fn;\n        this.onModelChangeRegistered = true;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n        this.onTouchRegistered = true;\n    }\n    //Overrides\n    setRating(value) {\n        const initValue = this.rating;\n        super.setRating(value);\n        //if value changed trigger valueAccessor events and outputs\n        if (initValue !== this.rating) {\n            const $event = { rating: this.rating };\n            this.saveOnRatingChange($event);\n            this.saveOnModelChange(this.rating);\n        }\n    }\n    /**\n     * onStarClicked\n     *\n     * Is fired when a star is clicked. And updated the rating value.\n     * This function returns if the disabled or readOnly\n     * property is set. If provided it emits the onClick event\n     * handler with the actual rating value.\n     *\n     * @param rating\n     */\n    onStarClicked(rating) {\n        //fire onClick event\n        if (!this.interactionPossible()) {\n            return;\n        }\n        this.rating = rating;\n        const onClickEventObject = {\n            rating: this.rating,\n        };\n        this.saveOnClick(onClickEventObject);\n    }\n}\nStarRatingControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StarRatingControlComponent, deps: [{ token: StarRatingConfigService }], target: i0.ɵɵFactoryTarget.Component });\nStarRatingControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0\", type: StarRatingControlComponent, selector: \"star-rating-control\", inputs: { getHalfStarVisible: \"getHalfStarVisible\", getColor: \"getColor\", showHalfStars: \"showHalfStars\", hoverEnabled: \"hoverEnabled\", rating: \"rating\", step: \"step\", disabled: \"disabled\", readOnly: \"readOnly\", space: \"space\", starType: \"starType\", size: \"size\", speed: \"speed\", numOfStars: \"numOfStars\", direction: \"direction\", staticColor: \"staticColor\", labelPosition: \"labelPosition\", labelText: \"labelText\", id: \"id\" }, outputs: { starClickChange: \"starClickChange\", ratingChange: \"ratingChange\", hoverRatingChange: \"hoverRatingChange\" }, providers: [STAR_RATING_CONTROL_ACCESSOR], usesInheritance: true, ngImport: i0, template: \"<div id=\\\"{{id}}\\\" class=\\\"rating {{getComponentClassNames()}}\\\" tabindex=\\\"0\\\"\\n  (keydown)=\\\"onKeyDown($event)\\\" (blur)=\\\"onBlur($event)\\\"\\n  (focus)=\\\"onFocus($event)\\\" (mouseleave)=\\\"onStarHover(0)\\\">\\n  <div *ngIf=\\\"labelText\\\" class=\\\"label-value\\\">{{labelText}}</div>\\n  <div class=\\\"star-container\\\">\\n    <div class=\\\"star\\\" (mouseenter)=\\\"onStarHover(star)\\\"\\n      *ngFor=\\\"let star of stars\\\" (click)=\\\"onStarClicked(star)\\\">\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-empty {{classEmpty}}\\\"></i>\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-half {{classHalf}}\\\"></i>\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-filled {{classFilled}}\\\"></i>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-empty\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathEmpty\\\"></use>\\n      </svg>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-half\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathHalf\\\"></use>\\n      </svg>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-filled\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathFilled\\\"></use>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\", directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StarRatingControlComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'star-rating-control', providers: [STAR_RATING_CONTROL_ACCESSOR], inputs: [\n                        'getHalfStarVisible',\n                        'getColor',\n                        'showHalfStars',\n                        'hoverEnabled',\n                        'rating',\n                        'step',\n                        'disabled',\n                        'readOnly',\n                        'space',\n                        'starType',\n                        'size',\n                        'speed',\n                        'numOfStars',\n                        'direction',\n                        'staticColor',\n                        //, 'labelVisible'\n                        'labelPosition',\n                        'labelText',\n                        'id',\n                    ], outputs: ['starClickChange', 'ratingChange', 'hoverRatingChange'], template: \"<div id=\\\"{{id}}\\\" class=\\\"rating {{getComponentClassNames()}}\\\" tabindex=\\\"0\\\"\\n  (keydown)=\\\"onKeyDown($event)\\\" (blur)=\\\"onBlur($event)\\\"\\n  (focus)=\\\"onFocus($event)\\\" (mouseleave)=\\\"onStarHover(0)\\\">\\n  <div *ngIf=\\\"labelText\\\" class=\\\"label-value\\\">{{labelText}}</div>\\n  <div class=\\\"star-container\\\">\\n    <div class=\\\"star\\\" (mouseenter)=\\\"onStarHover(star)\\\"\\n      *ngFor=\\\"let star of stars\\\" (click)=\\\"onStarClicked(star)\\\">\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-empty {{classEmpty}}\\\"></i>\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-half {{classHalf}}\\\"></i>\\n      <i *ngIf=\\\"!svgVisible()\\\" class=\\\"star-filled {{classFilled}}\\\"></i>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-empty\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathEmpty\\\"></use>\\n      </svg>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-half\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathHalf\\\"></use>\\n      </svg>\\n      <svg *ngIf=\\\"svgVisible()\\\" class=\\\"star-filled\\\">\\n        <use xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n          [attr.xlink:href]=\\\"pathFilled\\\"></use>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [] }]\n        }], ctorParameters: function () { return [{ type: StarRatingConfigService }]; } });\n\nconst DECLARATIONS = [StarRatingComponent, StarRatingControlComponent];\nconst EXPORTS = [DECLARATIONS];\nclass StarRatingModule {\n    static forRoot() {\n        return {\n            ngModule: StarRatingModule,\n            providers: [StarRatingConfigService],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: StarRatingModule,\n            providers: [],\n        };\n    }\n}\nStarRatingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StarRatingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nStarRatingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StarRatingModule, declarations: [StarRatingComponent, StarRatingControlComponent], imports: [CommonModule], exports: [StarRatingComponent, StarRatingControlComponent] });\nStarRatingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StarRatingModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StarRatingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [DECLARATIONS],\n                    exports: [EXPORTS],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { StarRating, StarRatingComponent, StarRatingConfig, StarRatingConfigService, StarRatingControlComponent, StarRatingModule, StarRatingUtils };\n"]},"metadata":{},"sourceType":"module"}